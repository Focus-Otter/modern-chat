type User @model @auth(rules: [{ allow: private }]) {
	# any logged in user can see the username, and userId of another user
	userId: ID!
	username: String
	createdAt: AWSDate
	updatedAt: AWSDate
	email: AWSEmail
	profilePic: AWSURL
}

type Channel @model {
	channnelID: ID!
	type: ChannelOrDMEnum
	name: String
	createdAt: AWSDate
	updatedAt: AWSDate
	messages(
		sortDirection: ModelSortDirection
		limit: Int
		nextToken: String
	): [Message] # A channel hasMany messages
	users: [String]
}

type Message @model {
	messageId: ID!
	channelID: ChannelID
	createdAt: AWSDate
	updatedAt: AWSDate
	userId: String # a message belongs to a User, clicking on a message should fetch user details
	content: MessageContent
	isEdited: Boolean
}

type MessageContent {
	text: String
}

# An example that we need to listen to when rooms are created, and
# when messages are created. Listening for rooms is great for DM's
# type Subscription {
# 	onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
# 	onCreateMessageByRoomId(roomId: ID): Message
# 		@aws_subscribe(mutations: ["createMessage"])
# }
